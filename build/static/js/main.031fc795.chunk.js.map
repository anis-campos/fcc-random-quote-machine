{"version":3,"sources":["mixins.js","App.js","serviceWorker.js","index.js"],"names":["borderRadius","args","transition","arr","length","isArray","properties","reduce","acc","item","library","add","fab","Container","props","theme","color","Card","NextQuoteButton","right","TweetQuoteButton","withComponent","colors","QuoteSource","id","this","css","name","React","Component","QuoteBox","QuoteContent","Quote","icon","faQuoteLeft","text","faQuoteRight","App","onClick","getRandomColor","Math","round","random","changeColor","setState","getQuote","a","fetch","response","json","data","console","log","quote","author","error","state","encodeURI","tweet","target","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.031fc795.chunk.js","sourcesContent":["import { isArray } from \"util\";\n\nexport function borderRadius(args) {\n  return `\n  -webkit-border-radius: ${args};\n  -moz-border-radius: ${args};\n  -ms-border-radius: ${args};\n  -o-border-radius: ${args};\n  border-radius: ${args};`\n  \n}\n\nexport function transition(...arr) {\n  if (arr.length === 1) {\n    const args = arr[0];\n    return `\n    -webkit-transition: ${args};\n    -moz-transition: ${args};\n    -ms-transition: ${args};\n    -o-transition: ${args};\n    transition: ${args};`\n  }\n  else if (arr.length === 2 && isArray(arr[0])) {\n    const args = arr[1];\n    const properties = arr[0].reduce((acc,item)=>acc+', '+item);\n    return `\n    -webkit-transition: ${args};\n    -moz-transition: ${args};\n    -ms-transition: ${args};\n    -o-transition: ${args};\n    transition: ${args};\n    -webkit-transition-property: ${properties};\n    -moz-transition-property: ${properties};\n    -ms-transition-property: ${properties};\n    -o-transition-property: ${properties};\n    transition-property: ${properties};\n    `\n  }\n  else\n    return \"\"\n}","/** @jsx jsx */\nimport React from 'react';\nimport styled from '@emotion/styled/macro'\nimport css from '@emotion/css/macro'\nimport { jsx } from '@emotion/core'\nimport { ThemeProvider } from 'emotion-theming'\nimport { transition, borderRadius } from './mixins.js'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { faQuoteLeft, faQuoteRight } from '@fortawesome/free-solid-svg-icons'\nimport { library } from '@fortawesome/fontawesome-svg-core';\n\nlibrary.add(fab)\n\nconst Container = styled.div`\n    text-align: center;\n    background-color: ${props => props.theme.color};\n    ${transition(['background-color', 'color'], \"1000ms ease-in\")}\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    font-size: calc(10px + 2vmin);\n    color: ${props => props.theme.color};\n`\n\n\n\nconst Card = styled.div`\n    background-color: white;\n    padding:2vw;\n    max-width: 90vw;\n    min-height: 100px;\n    @media (min-width: 1000px) {\n      max-width:  40vw;\n    }\n    ${borderRadius(\"10px\")}\n    \n`\n\nconst NextQuoteButton = styled.p`\n    float:${props => props.right ? 'right' : 'left'};\n    margin: 3vh 1vw 0 0;\n    padding:10px;\n    background-color:  ${props => props.theme.color};\n    border:none;\n    color: #fff;\n    line-height:40px;\n    height:40px;\n    :hover,:focus{\n      opacity: 0.9;\n      cursor: pointer;\n    };\n    position: relative;\n    overflow: hidden;\n    transform: translate3d(0, 0, 0);\n    :after {\n      content: \"\";\n      display: block;\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      top: 0;\n      left: 0;\n      pointer-events: none;\n      background-image: radial-gradient(circle, #000 10%, transparent 10.01%);\n      background-repeat: no-repeat;\n      background-position: 50%;\n      transform: scale(10,10);\n      opacity: 0;\n      transition: transform 1s, opacity 1s;\n    }\n    :active:after {\n      transform: scale(0,0);\n      opacity: .2;\n      transition: 0s;\n    }\n    min-width:40px;\n    ${borderRadius('5px')}\n    ${transition('background-color 1000ms ease-in')}  \n`;\n\nconst TweetQuoteButton = NextQuoteButton.withComponent('a')\n\nconst colors = [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#9467bd\", \"#8c564b\", \"#e377c2\", \"#7f7f7f\", \"#bcbd22\", \"#17becf\"];\n\n\n\n\nclass QuoteSource extends React.Component {\n  render() {\n    return (\n      <div id={this.props.id} css={css`\n      text-align:right;\n      padding-right: 1vw;\n      `}>\n        - {this.props.name}\n      </div>\n    );\n  }\n}\n\nconst QuoteBox = styled.div`\n    font-size: calc(18px + (50 - 18) * ((100vw - 300px) / (1600 - 300)));\n    margin-bottom: 20px;\n`\nconst QuoteContent = styled.span`\n    padding: 0 calc(5px + 1vw) 0 calc(5px + 1vw);\n`\nclass Quote extends React.Component {\n  render() {\n    return (\n      <QuoteBox>\n        <FontAwesomeIcon icon={faQuoteLeft} />\n        <QuoteContent id={this.props.id} >{this.props.text}</QuoteContent>\n        <FontAwesomeIcon icon={faQuoteRight} />\n      </QuoteBox>\n    );\n  }\n}\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      author: \"Name Of the Guy\",\n      quote: \"This is a really inspiring citation\",\n      theme: {\n        color: this.getRandomColor()\n      }\n    }\n  }\n\n  onClick = () => {\n    debugger\n  }\n\n  getRandomColor = () => colors[Math.round(Math.random() * (colors.length - 1))]\n\n  changeColor = () => {\n    this.setState({\n\n      theme: {\n        color: this.getRandomColor()\n      }\n    })\n  }\n\n  getQuote = async () => {\n    try {\n      const response = await fetch(\"/api/1.0/?method=getQuote&format=json&lang=en\");\n      const data = await response.json();\n      console.log(data)\n      const { 'quoteText': quote, 'quoteAuthor': author } = data\n      this.changeColor()\n      this.setState({\n        quote, author\n      })\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  render() {\n    const { author: name, quote: text } = this.state;\n    const quote = encodeURI(`\"${text}\" - ${name}`);\n    return (\n      <ThemeProvider theme={this.state.theme}>\n        <Container>\n          <Card id=\"quote-box\">\n            <Quote id=\"text\" text={text} />\n            <QuoteSource id=\"author\" name={name} />\n            <NextQuoteButton id=\"new-quote\" right={true} onClick={this.getQuote}> Next Quote </NextQuoteButton>\n            <TweetQuoteButton id=\"tweet-quote\" onClick={this.tweet} target=\"_blank\" href={`https://twitter.com/intent/tweet?text=${quote}&hashtags=quote`}><FontAwesomeIcon icon={['fab', 'twitter']} /></TweetQuoteButton>\n          </Card>\n        </Container>\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}